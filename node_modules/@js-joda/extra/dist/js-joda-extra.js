//! @version @js-joda/extra - 0.8.0
//! @copyright (c) 2015-present, Philipp Thürwächter, Pattrick Hüper & js-joda contributors
//! @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos
//! @license BSD-3-Clause (see LICENSE in the root directory of this source tree)

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@js-joda/core')) :
    typeof define === 'function' && define.amd ? define(['exports', '@js-joda/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.JSJodaExtra = {}, global.JSJoda));
})(this, (function (exports, core) { 'use strict';

    /**
     * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper
     * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)
     */
    function requireNonNull(value, parameterName) {
      if (value == null) {
        throw new core.NullPointerException(parameterName + " must not be null");
      }

      return value;
    }
    function requireInstance(value, _class, parameterName) {
      if (!(value instanceof _class)) {
        throw new core.IllegalArgumentException(parameterName + " must be an instance of " + (_class.name ? _class.name : _class) + (value && value.constructor && value.constructor.name ? ", but is " + value.constructor.name : ''));
      }

      return value;
    }

    /*
     * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper
     * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos
     * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)
     */
    var Interval = function () {
      Interval.of = function of(startInstant, endInstantOrDuration) {
        if (endInstantOrDuration instanceof core.Duration) {
          return Interval.ofInstantDuration(startInstant, endInstantOrDuration);
        } else {
          return Interval.ofInstantInstant(startInstant, endInstantOrDuration);
        }
      };

      Interval.ofInstantInstant = function ofInstantInstant(startInclusive, endExclusive) {
        requireNonNull(startInclusive, 'startInclusive');
        requireNonNull(endExclusive, 'endExclusive');
        requireInstance(startInclusive, core.Instant, 'startInclusive');
        requireInstance(endExclusive, core.Instant, 'endExclusive');

        if (endExclusive.isBefore(startInclusive)) {
          throw new core.DateTimeException('End instant must on or after start instant');
        }

        return new Interval(startInclusive, endExclusive);
      };

      Interval.ofInstantDuration = function ofInstantDuration(startInclusive, duration) {
        requireNonNull(startInclusive, 'startInclusive');
        requireNonNull(duration, 'duration');
        requireInstance(startInclusive, core.Instant, 'startInclusive');
        requireInstance(duration, core.Duration, 'duration');

        if (duration.isNegative()) {
          throw new core.DateTimeException('Duration must not be zero or negative');
        }

        return new Interval(startInclusive, startInclusive.plus(duration));
      };

      Interval.parse = function parse(text) {
        requireNonNull(text, 'text');

        if (!(typeof text === 'string')) {
          throw new core.IllegalArgumentException("text must be a string, but is " + text.constructor.name);
        }

        for (var i = 0; i < text.length; i += 1) {
          if (text.charAt(i) === '/') {
            var firstChar = text.charAt(0);

            if (firstChar === 'P' || firstChar === 'p') {
              var duration = core.Duration.parse(text.substring(0, i));
              var end = core.ZonedDateTime.parse(text.substring(i + 1, text.length)).toInstant();
              return Interval.of(end.minus(duration), end);
            } else {
              var start = core.ZonedDateTime.parse(text.substring(0, i)).toInstant();

              if (i + 1 < text.length) {
                var c = text.charAt(i + 1);

                if (c === 'P' || c === 'p') {
                  var _duration = core.Duration.parse(text.substring(i + 1, text.length));

                  return Interval.of(start, start.plus(_duration));
                }
              }

              var _end = core.ZonedDateTime.parse(text.substring(i + 1, text.length)).toInstant();

              return Interval.of(start, _end);
            }
          }
        }

        throw new core.DateTimeParseException('Interval cannot be parsed, no forward slash found', text, 0);
      };

      function Interval(startInclusive, endExclusive) {
        this._start = startInclusive;
        this._end = endExclusive;
      }

      var _proto = Interval.prototype;

      _proto.start = function start() {
        return this._start;
      };

      _proto.end = function end() {
        return this._end;
      };

      _proto.isEmpty = function isEmpty() {
        return this._start.equals(this._end);
      };

      _proto.isUnboundedStart = function isUnboundedStart() {
        return this._start.equals(core.Instant.MIN);
      };

      _proto.isUnboundedEnd = function isUnboundedEnd() {
        return this._end.equals(core.Instant.MAX);
      };

      _proto.withStart = function withStart(start) {
        return Interval.of(start, this._end);
      };

      _proto.withEnd = function withEnd(end) {
        return Interval.of(this._start, end);
      };

      _proto.contains = function contains(instant) {
        requireNonNull(instant, 'instant');
        requireInstance(instant, core.Instant, 'instant');
        return this._start.compareTo(instant) <= 0 && (instant.compareTo(this._end) < 0 || this.isUnboundedEnd());
      };

      _proto.encloses = function encloses(other) {
        requireNonNull(other, 'other');
        requireInstance(other, Interval, 'other');
        return this._start.compareTo(other.start()) <= 0 && other.end().compareTo(this._end) <= 0;
      };

      _proto.abuts = function abuts(other) {
        requireNonNull(other, 'other');
        requireInstance(other, Interval, 'other');
        return !this._end.equals(other.start()) !== !this._start.equals(other.end());
      };

      _proto.isConnected = function isConnected(other) {
        requireNonNull(other, 'other');
        requireInstance(other, Interval, 'other');
        return this.equals(other) || this._start.compareTo(other.end()) <= 0 && other.start().compareTo(this._end) <= 0;
      };

      _proto.overlaps = function overlaps(other) {
        requireNonNull(other, 'other');
        requireInstance(other, Interval, 'other');
        return other.equals(this) || this._start.compareTo(other.end()) < 0 && other.start().compareTo(this._end) < 0;
      };

      _proto.intersection = function intersection(other) {
        requireNonNull(other, 'other');
        requireInstance(other, Interval, 'other');

        if (this.isConnected(other) === false) {
          throw new core.DateTimeException("Intervals do not connect: " + this + " and " + other);
        }

        var cmpStart = this._start.compareTo(other.start());

        var cmpEnd = this._end.compareTo(other.end());

        if (cmpStart >= 0 && cmpEnd <= 0) {
          return this;
        } else if (cmpStart <= 0 && cmpEnd >= 0) {
          return other;
        } else {
          var newStart = cmpStart >= 0 ? this._start : other.start();
          var newEnd = cmpEnd <= 0 ? this._end : other.end();
          return Interval.of(newStart, newEnd);
        }
      };

      _proto.union = function union(other) {
        requireNonNull(other, 'other');
        requireInstance(other, Interval, 'other');

        if (this.isConnected(other) === false) {
          throw new core.DateTimeException("Intervals do not connect: " + this + " and " + other);
        }

        var cmpStart = this._start.compareTo(other.start());

        var cmpEnd = this._end.compareTo(other.end());

        if (cmpStart >= 0 && cmpEnd <= 0) {
          return other;
        } else if (cmpStart <= 0 && cmpEnd >= 0) {
          return this;
        } else {
          var newStart = cmpStart >= 0 ? other.start() : this._start;
          var newEnd = cmpEnd <= 0 ? other.end() : this._end;
          return Interval.of(newStart, newEnd);
        }
      };

      _proto.span = function span(other) {
        requireNonNull(other, 'other');
        requireInstance(other, Interval, 'other');

        var cmpStart = this._start.compareTo(other.start());

        var cmpEnd = this._end.compareTo(other.end());

        var newStart = cmpStart >= 0 ? other.start() : this._start;
        var newEnd = cmpEnd <= 0 ? other.end() : this._end;
        return Interval.of(newStart, newEnd);
      };

      _proto.isAfter = function isAfter(instantOrInterval) {
        if (instantOrInterval instanceof core.Instant) {
          return this.isAfterInstant(instantOrInterval);
        } else {
          return this.isAfterInterval(instantOrInterval);
        }
      };

      _proto.isBefore = function isBefore(instantOrInterval) {
        if (instantOrInterval instanceof core.Instant) {
          return this.isBeforeInstant(instantOrInterval);
        } else {
          return this.isBeforeInterval(instantOrInterval);
        }
      };

      _proto.isAfterInstant = function isAfterInstant(instant) {
        return this._start.compareTo(instant) > 0;
      };

      _proto.isBeforeInstant = function isBeforeInstant(instant) {
        return this._end.compareTo(instant) <= 0 && this._start.compareTo(instant) < 0;
      };

      _proto.isAfterInterval = function isAfterInterval(interval) {
        return this._start.compareTo(interval.end()) >= 0 && !interval.equals(this);
      };

      _proto.isBeforeInterval = function isBeforeInterval(interval) {
        return this._end.compareTo(interval.start()) <= 0 && !interval.equals(this);
      };

      _proto.toDuration = function toDuration() {
        return core.Duration.between(this._start, this._end);
      };

      _proto.equals = function equals(obj) {
        if (this === obj) {
          return true;
        }

        if (obj instanceof Interval) {
          return this._start.equals(obj.start()) && this._end.equals(obj.end());
        }

        return false;
      };

      _proto.hashCode = function hashCode() {
        return this._start.hashCode() ^ this._end.hashCode();
      };

      _proto.toString = function toString() {
        return this._start.toString() + "/" + this._end.toString();
      };

      return Interval;
    }();
    function _init() {
      Interval.ALL = Interval.of(core.Instant.MIN, core.Instant.MAX);
    }

    /*
     * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper
     * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)
     */
    var isInit = false;

    function init() {
      if (isInit) {
        return;
      }

      isInit = true;
      _init();
    }

    init();

    /*
     * @copyright (c) 2016, Philipp Thuerwaechter & Pattrick Hueper
     * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)
     */
    function plug () {}

    /*
     * @copyright (c) 2016, Philipp Thuerwaechter & Pattrick Hueper
     * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)
     */
    core.use(plug);

    exports.Interval = Interval;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=js-joda-extra.js.map
